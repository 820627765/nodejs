1，NVM  工具
首先：windows 版本的NVM目前遇到的一个特点，在安装NVM之前要先卸载之前安装的Node.js ，然后再使用 nvm install latest 来安装最新的Node版本。
- nvm 是什么？
NVM：Node Version Manager  ，即Node.js 的版本管理工具，可以用来切换Node.js 的版本。
但是，NVM Windows 的功能很弱，Mac 或 Linux 上的NVM 功能会强一些。

- 安装NVM (Windows 的VNM叫 nvm-windows)
1）去github上下载 nvm-windows 安装安装包 https://github.com/coreybutler/nvm-windows 。下载安装版本吧 nvm-setup.exe
2）安装
3）检测nvm 是否安装好，执行命令 nvm -v 
4）找到nvm 的安装目录，将node 和 npm 的镜像改为淘宝镜像
   node_mirror: https://npm.taobao.org/mirrors/node/
   npm_mirror: https://npm.taobao.org/mirrors/npm/
 

- NVM 常用的一些命令
1）nvm --help  查看nvm 常用的帮组
2）nvm list  查看本地环境中，已经安装的Node.js 的版本，绿色箭头指向的是当前使用的版本。
3）nvm use 版本名    #切换当前(进程)使用的Node.js 的版本。其他进程还是用默认的版本。
4）nvm alias default 版本名   #表示修改Node.js 的默认版本。当打开其他进程时，就是用新修改的版本了。
5）nvm install node.js的版本（latest表示最新版本）  #用于安装nodejs。
   安装完成后，可以从 D:\install\nvm\v16.3.0 下看见安装的node.js 的版本，v16.3.0 就是刚才安装的最新版本。
   检测node 和 npm 的版本，node -v 和 npm -v。 可以发现 node -v 是可以的，而 npm -v 就不行了，因为高版本的node.js 是没有自带安装 npm 的，所以需要自己安装。下面会有介绍
6）nvm list available  #查看所有的node.js 版本。

此时：利用nvm 已经能安装和切换node.js 


2，NPM  工具
- npm 是什么？
Node Package Manager 是Node.js 的包管理工具。
“包”也可以称之为“模块”，是Node.js 非常重要的生态。我们想要实现自己的功能，就需要开发自己的“包”，当然写功能也需要使用”第三方的包“以及Node.js 内置的包。

- 安装npm 工具
通过 nvm 安装高版本的 node.js ，是不会自带安装npm 的所以需要我们自己下载安装，下载地址可以用淘宝镜像地址：https://npm.taobao.org/mirrors/npm/
选择那个版本呢？在通过nvm 安装node.js时，会有下载的提示，可以看见对应的版本。这里我下载的是 v7.15.1.zip
解压后，将文件夹命名为 npm,并复制到 node.js版本的 node_modules 目录下（在nvm安装目录里会有node.js对应的版本，这里的node_modules 就是后面要将的全局的包安装目录）。
最后将npm中bin目录下的npm以及npm.cmd复制到与node_modules目录同级目录下。
最后使用 npm -v 查看是否配置成功。

- 包的类型
1）自定义的包
2）第三方的包
3）Node.js 内置的包

- npm 的常用命令
1）npm install/i 包名 [-g/--global]   表示安装指定的包
   * install 和 i 都行
   * -g 或 --global 表示全局安装，否则就是在当前项目中安装。
     全局安装后，任何项目都可以引入使用。否则只有当前项目可以使用。
   * 安装好包后，就可以在项目中使用 const a = require('包名') 的形式引入，并使用。

   案例：
   * npm i gulp --dev-save 
   执行完成后，会在当前项目生成一个 node_modules 文件夹，并且会将安装的包信息存放到该目录中。
   该 node_module 目录下有一个 .bin 目录，存放了每一个包对应的命令。
   --dev 表示开发环境
   -save 表示会将该包配置到 package.json 中，以dev作为标识，标识开发环境。

   注意：如果没有指定版本，则默认会安装最新版本。

   * npm i underscore --save 表示安装underscore包，并保存到package.json 中。 --save 可以用 -S 代替。也可以不写，默认也是会保存，哈哈。
   -S 表示将安装包信息保存到package.json 的生产环境的dependencies 中。
   -D 表示将安装包信息保存到package.json 的开发环境的devDependencies 中。


2）npm uninstall 包名 -g  表示卸载到全局安装的这个包。

3）npm init -y  表示在当前项目初始化一个npm 的环境，直观的就是会在当前项目中创建一个 package.json 的文件。
   该文件，就是当前项目的包管理的配置文件。

4）npm dev run  表示执行当前项目中 package.json 中的"scripts":{"dev":"gulp -v"} 所配置的 dev 对应的命令。

5）npm list  查看项目的包的依赖关系，有层次展示。

6）npm i --production  安装当前项目package.json 所依赖的包，且只安装生产环境所依赖的包（dependencies 节点下的包）。

7）npm view 包名 versions  查看指定包所有的版本

8）npm i 包名@版本号 [-S/-D]   安装指定版本的包。
   注意：所以如果想要修改依赖包的版本，可以直接去修改package.json 中包对应的那个版本。

9）npm i 包名@版本级别(如1)  表示安装这个包版本层次对应的那个最高版本。如 npm i jquery@1 表示安装jquery1.xxxx 的最高版本。

10）npm outdated  查看当前项目所依赖的包，哪些过期了。如果有包过期，会打印出如下信息
    package     Current           Wanted              Lastest      Location
    包名        当前安装的版本      项目想要的的版本      最新版本     所在的项目
                                 如果配置的是^2.0.0 ，则此处会显示主版本号是2的最高版本。
                                 故^可以理解为锁定主版本。当执行 npm update 后，会将当前项目
                                 所依赖的该包更新为2这个主版本对应的最高版本。
                                 ~ 表示锁定主版本号和次版本号，执行 npm update 会将该包更新为主版本和此版本对应的最高版本。
                                 不加任务锁定符，表示我要的就是这个版本，别更新。
                                 * 表示如果更新，更新为该包的最新版本。 
                

11）npm update  表示将本项目的依赖更新到最新版本。但是这里的更新会根据一些”锁定符”来判断。

12）npm cache clean --force  清理npm的缓存。
    为什么要清理npm缓存呢？npm默认有一个缓存文件夹，在第二次安装的时候，比第一次要快，如果第一次安装错了（如网挂了），则第二次也会错。因此将缓存文件夹
    清理掉，下一次就可以了。


13）npm config get registry 查看当前源

14）npm config set registry https://registry.npmjs.org  设置源为https://registry.npmjs.org

15）npm ls  查看当前项目引用了哪些包

16）npm unpublish --force   卸载包

17）npm install git+https://xxx.git  安装一个发布到git仓库的包。
    


注意： 
npm 全局安装会将包安装到当前Node.js对应版本的目录的 node_modules 文件夹中。我本地是 D:\install\nvm\v16.3.0\node_modules
npm 本地安装会安装到当前项目的 node_modules 目录下。



3，NRM 工具
NRM（npm registry manager) 是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在npm源之间切换。
1）安装nrm
npm install -g nrm 
有时候，这个nrm最高版本太高，执行命令有问题，所以可以指定低版本地安装，如 npm install -g nrm@1.1.0
2）使用
* nrm ls         # 查看可用源
* nrm ls 源名称   # eg： nrm use taobao  切换到淘宝源
* nrm test        #测试各个可用源地相应时间。


4，npx 工具
* npx（npm package extention) ，npm 从5.2开始，增加了 npx 命令。因为 npm 自带 npx 工具，所以可用直接使用。(如果没有就直接安装一个即可)
* npx 主要地作用就是“调用项目内部安装地模块”，比如项目内部安装了 Mocha （npm i -D mocha） ，一般来说调用mocha ，只能在项目脚本和package.json的scripts
  字段里面，如果向在命令行下调用，必须向如下写法：
  在项目的根目录下执行 node-modules/.bin/mocha --version  ,来实现安装模块的功能调用。
  因此 npx 就要解决，可以直接在命令行使用。
1）如何使用npx 呢？
   npx mocha --version  即可调用项目中安装的模块。
   npx --no-install 命令 表示执行命令，并如果本地和全局都没有，则不需要下载哈。
   
2）npx 是怎么找对应的命令的？
npx 会到node_modules/.bin/路径和环境变量 $PATH 去找命令是否存在，所以系统命令也可以调用。
如果都没有找到，则默认直接下载，并安装到一个临时文件中，可以通过 --no-install 让它不要安装。




